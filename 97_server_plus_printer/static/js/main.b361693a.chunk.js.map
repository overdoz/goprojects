{"version":3,"sources":["white-construction-paper-texture.jpg","FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FileUpload","props","onChangeHandler","event","setState","selectedFile","target","files","loaded","onClickHandler","data","FormData","append","state","axios","post","then","res","console","log","statusText","className","method","action","type","accept","capture","name","onChange","this","value","onClick","Component","App","useState","text","setText","src","paper","alt","wrap","cols","e","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,8D,0PC2C5BC,E,YAtCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,gBAAgB,SAAAC,GACZ,EAAKC,SAAS,CACVC,aAAcF,EAAMG,OAAOC,MAAM,GACjCC,OAAQ,KAXG,EAgBnBC,eAAiB,WACb,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAKC,MAAMR,cAC/BS,IAAMC,KAAK,+BAAgCL,EAAM,IAE9CM,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,gBApBpB,EAAKP,MAAQ,CACTR,aAAc,MAHH,E,sEA2Bf,OACI,6BAASgB,UAAW,kBAChB,0BAAMC,OAAO,OAAOC,OAAO,KACvB,2BAAOF,UAAW,SAAUG,KAAM,OAAQC,OAAQ,UAAWC,QAAS,SAAUC,KAAM,OAAQC,SAAUC,KAAK3B,kBAC7G,2BAAOmB,UAAW,cAAeG,KAAK,SAASM,MAAM,QAAQC,QAASF,KAAKpB,uB,GAhCtEuB,aCwBVC,MAtBf,WACE,IADa,EAGWC,mBAAS,IAHpB,mBAGNC,EAHM,KAGAC,EAHA,KAOb,OACE,yBAAKf,UAAU,iBACX,6BAASA,UAAW,mBAChB,yBAAKgB,IAAKC,IAAOC,IAAK,WACtB,0BAAMjB,OAAO,OAAOC,OAAO,KACvB,8BAAUI,KAAO,OAAQa,KAAM,OAAQC,KAAM,KAAMpB,UAAW,YAAaS,MAAOK,EAAMP,SAAU,SAACc,GAAD,OAAON,EAAQM,EAAEpC,OAAOwB,QAAQa,YAAa,+YAC/I,2BAAOtB,UAAW,cAAeG,KAAK,SAASM,MAAM,YAG7D,kBAAC,EAAD,QCVFc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnC,MAAK,SAAAwC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,YAI1B3C,QAAQC,IACN,iHAKEiC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBtC,QAAQC,IAAI,sCAGRiC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACL/C,QAAQ+C,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,GACHnC,MAAK,SAAA4D,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMlE,MAAK,SAAAwC,GACjCA,EAAa2B,aAAanE,MAAK,WAC7B8B,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL9C,QAAQC,IACN,oEArFAkE,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMlE,MAAK,WACjCE,QAAQC,IACN,iHAMJ+B,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.b361693a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white-construction-paper-texture.41991707.jpg\";","import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios';\n\nclass FileUpload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null\n        }\n\n    }\n\n    onChangeHandler=event=>{\n        this.setState({\n            selectedFile: event.target.files[0],\n            loaded: 0,\n        });\n        //console.log(this.state.selectedFile);\n    };\n\n    onClickHandler = () => {\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        axios.post(\"http://localhost:8000/upload\", data, {\n            // receive two    parameter endpoint url ,form data\n        }).then(res => { // then print response status\n            console.log(res.statusText)\n        })\n    };\n\n    render() {\n        return (\n            <section className={\"child pic-page\"}>\n                <form method=\"POST\" action=\"/\">\n                    <input className={\"upload\"} type={\"file\"} accept={\"image/*\"} capture={\"camera\"} name={\"file\"} onChange={this.onChangeHandler} />\n                    <input className={\"inputButton\"} type=\"submit\" value=\"print\" onClick={this.onClickHandler}/>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default FileUpload","import React, { useState } from 'react';\nimport './App.css';\nimport paper from './white-construction-paper-texture.jpg';\nimport FileUpload from \"./FileUpload\";\n\n\nfunction App() {\n  const w = \"             W \\n            WWW\\n            WWW\\n           WWWWW\\n     W     WWWWW     W\\n     WWW   WWWWW   WWW\\n      WWW  WWWWW  WWW\\n       WWW  WWW  WWW\\n        WWW WWW WWW\\n          WWWWWWW\\n       WWWW  |  WWWW\\n             |\\n             |\\n\"\n\n  const [text, setText] = useState(\"\");\n\n\n \n  return (\n    <div className=\"App container\">\n        <section className={\"child text-page\"}>\n            <img src={paper} alt={\"papier\"}/>\n            <form method=\"POST\" action=\"/\">\n                <textarea name ={\"text\"} wrap={\"hard\"} cols={\"30\"} className={\"textField\"} value={text} onChange={(e) => setText(e.target.value)} placeholder={\"  Lass uns eine Notiz da... \\n\\n\" + w + \"\\n ┏(-_-)┛┗(-_-﻿ )┓┗(-_-)┛\\n\\n  be creative :) \\n    or die tryin \\n\\n \"} />\n                <input className={\"inputButton\"} type=\"submit\" value=\"print\" />\n            </form>\n        </section>\n        <FileUpload />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}